---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-users-traffic
  namespace: tyk
data:
  load.js: |
    import http from 'k6/http';
    import { sleep, check, fail } from 'k6';
    import { randomIntBetween } from 'https://jslib.k6.io/k6-utils/1.2.0/index.js';

    export const options = {
        insecureSkipTLSVerify: true,
        discardResponseBodies: true,
        scenarios: {
            users: {
                executor: 'constant-vus',
                exec: 'users',
                vus: 10,
                duration: '2h',
            }
        }
    };
    
    function createKey(username) {
        const params = {
            responseType: 'text',
        };
        
        let payload = {
            client_id: 'keycloak-oauth',
            grant_type: 'password',
            client_secret: 'NoTgoLZpbrr5QvbNDIRIvmZOhe9wI0r0',
            scope: 'openid',
            password: 'topsecretpassword',
            username,
        };
        
        const res = http.post('http://keycloak-service.tyk.svc:7000/realms/keycloak-oauth/protocol/openid-connect/token', payload, params);
        
        check(res, {
            ['Key creation call status is 200']: (r) => r.status === 200,
        }) || fail('Failed to create ' + username + ' key');
        
        return res.json().access_token
    }
    
    export function setup() {
        return createKey('admin@example.com');
    }
    
    export function users(key) {
        const params = {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': key
            }
        };
        
        http.get("http://gateway-svc-tyk-gateway.tyk.svc:8080/users/" + randomIntBetween(1, 10), params);    
        sleep(randomIntBetween(1, 10));
    }
---
apiVersion: k6.io/v1alpha1
kind: TestRun
metadata:
    name: k6-users-traffic
    namespace: tyk
spec:
    parallelism: 1
    separate: false
    quiet: "false"
    script:
        configMap:
            name: k6-users-traffic
            file: load.js
