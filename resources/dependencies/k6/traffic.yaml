apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-traffic
data:
  load.js: |
    import http from 'k6/http';
    import { sleep, check, fail } from 'k6';
    import {randomIntBetween} from 'https://jslib.k6.io/k6-utils/1.2.0/index.js';

    export const options = {
        insecureSkipTLSVerify: true,
        discardResponseBodies: true,
        scenarios: {
            success: {
                executor: 'constant-vus',
                exec: 'success',
                vus: 50,
                duration: '2h',
            },
            failure: {
                executor: 'constant-vus',
                exec: 'error',
                vus: 10,
                duration: '2h',
            },
            differentPath: {
                executor: 'constant-vus',
                exec: 'differentPath',
                vus: 100,
                duration: '2h',
            },
            differentMethod: {
                executor: 'constant-vus',
                exec: 'differentMethod',
                vus: 100,
                duration: '2h',
            },
            breakingSlo: {
                executor: 'per-vu-iterations',
                exec: 'breakingSlo',
                vus: 50,
                iterations: 500,
                maxDuration: '2h',
            },
            sendSocialMedia: {
                executor: 'constant-vus',
                exec: 'sendSocialMedia',
                vus: 100,
                duration: '2h',
            },
            sendUsers: {
                executor: 'constant-vus',
                exec: 'sendUsers',
                vus: 100,
                duration: '2h',
            },
            sendStarWars: {
                executor: 'constant-vus',
                exec: 'sendStarWars',
                vus: 100,
                duration: '2h',
            }
        }
    };
    
    function createKey(username) {
        const params = {
            responseType: 'text',
        };
        
        let payload = {
            client_id: 'keycloak-oauth',
            grant_type: 'password',
            client_secret: 'NoTgoLZpbrr5QvbNDIRIvmZOhe9wI0r0',
            scope: 'openid',
            password: 'topsecretpassword',
            username,
        };
        
        const res = http.post('http://keycloak-service.tyk.svc:7000/realms/keycloak-oauth/protocol/openid-connect/token', payload, params);
        
        check(res, {
            ['Key creation call status is 200']: (r) => r.status === 200,
        }) || fail('Failed to create ' + username + ' key');
        
       return res.json().access_token
    }
    
    function sendStatus(status) {
        http.get('http://gateway-svc-tyk-gateway.tyk.svc:8080/httpbin/status/' + status);
        sleep(randomIntBetween(10, 30));
    }
    
    export function setup() {    
        const admin     = 'admin@example.com',
              developer = 'developer@example.com';

        return [
            createKey(admin),
            createKey(developer),
        ];
    }
    
    export function sendStarWars(keys) {
        var payload;
        var params;
        
        const queries = [
            'query { species(speciesID: ' + randomIntBetween(0, 40) + ') { name language } }',
            'query { planet(planetID: ' + randomIntBetween(0, 60) + ') { name gravity diameter } }',
            'query { person(persontID: ' + randomIntBetween(0, 60) + ') { name homeworld { name } birthYear } }',
        ]
        
        payload = JSON.stringify({ query: queries[randomIntBetween(0, 2)] });
        params = {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': keys[randomIntBetween(0, keys.length)]
            }
        };
        
        http.post('http://gateway-svc-tyk-gateway.tyk.svc:8080/star-wars', payload, params)
        sleep(60);
    }
    
    export function sendSocialMedia() {
        var payload;
        var params;
        
        // Runs 0-10, where 0 will return an error
        payload = JSON.stringify({
            query: 'query { user(id: ' + randomIntBetween(0, 10) + ') { name email posts { title body comments { name email body } } } }',
        });
        
        params = {
            headers: {
                'Content-Type': 'application/json',
            }
        };
        
        http.post('http://gateway-svc-tyk-gateway.tyk.svc:8080/social-media', payload, params)
        sleep(60);
    }
    
    export function sendUsers() {
        var payload;
        var params;
        
        // Runs 0-10, where 0 will return an error
        payload = JSON.stringify({
            query: 'query { user(id: ' + randomIntBetween(0, 10) + ') { name email username company { name } address { city } } }',
        });
        
        params = {
            headers: {
                'Content-Type': 'application/json',
            }
        };
        
        http.post('http://gateway-svc-tyk-gateway.tyk.svc:8080/users', payload, params)
        sleep(randomIntBetween(10, 30));
    }
    
    export function success() {
        sendStatus(200);
    }

    export function breakingSlo() {
        sendStatus(502);
    }

    export function error() {
        switch (randomIntBetween(1, 5)) {
            case 1:
                sendStatus(400); break;
            case 2:
                sendStatus(404); break;
            case 3:
                sendStatus(500); break;
            case 4:
                sendStatus(502); break;
            case 5:
                sendStatus(503); break;
        }
        sleep(randomIntBetween(10, 30));
    }

    export function differentPath() {
        switch (randomIntBetween(1, 5)) {
            case 1:
                http.get('http://gateway-svc-tyk-gateway.tyk.svc:8080/httpbin/cache'); break;
            case 2:
                http.get('http://gateway-svc-tyk-gateway.tyk.svc:8080/httpbin/ip'); break;
            case 3:
                http.get('http://gateway-svc-tyk-gateway.tyk.svc:8080/httpbin/headers'); break;
            case 4:
                http.get('http://gateway-svc-tyk-gateway.tyk.svc:8080/httpbin/user-agent'); break;
            default:
                http.get('http://gateway-svc-tyk-gateway.tyk.svc:8080/httpbin/image'); break;
        }
        sleep(randomIntBetween(10, 30));
    }

    export function differentMethod() {
        var payload;
        var params;
        
        payload = JSON.stringify({
            content: 'Hello Tyk',
        });
        
        params = {
            headers: {
                'Content-Type': 'application/json',
            }
        };
        
        switch (randomIntBetween(1, 5)) {
            case 1:
                http.post("http://gateway-svc-tyk-gateway.tyk.svc:8080/httpbin/post", payload, params);
                break;
            case 2:
                http.patch("http://gateway-svc-tyk-gateway.tyk.svc:8080/httpbin/patch", payload, params);
                break;
            case 3:
                http.del("http://gateway-svc-tyk-gateway.tyk.svc:8080/httpbin/delete", payload, params);
                break;
            case 4:
                http.put("http://gateway-svc-tyk-gateway.tyk.svc:8080/httpbin/put", payload, params);
                break;
            case 5:
                http.post("http://gateway-svc-tyk-gateway.tyk.svc:8080/httpbin/response-headers", payload, params);
                break;
        }
        sleep(randomIntBetween(10, 30));
    }
